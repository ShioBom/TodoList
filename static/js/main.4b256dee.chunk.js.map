{"version":3,"sources":["components/TodoItem/index.js","components/action.js","components/Homepage/index.js","App.js","serviceWorker.js","components/reducer.js","components/store.js","index.js"],"names":["TodoItem","_Component","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","apply","arguments","inherits","createClass","key","value","_this","react_default","a","createElement","className","type","checked","props","status","onChange","e","handleFinish","index","todo","onClick","handleDel","Component","connect","state","todos","dispatch","ind","payload","target","updateAction","HomePage","call","setState","_this2","placeholder","handleChange","handleAdd","waiting","length","map","ele","src_components_TodoItem","id","finish","filter","ownProps","val","parseInt","Math","random","console","log","App","components_Homepage","Boolean","window","location","hostname","match","initialState","store","createStore","undefined","_ref","concat","toConsumableArray","newTodos","arr","forEach","push","arr2","ReactDOM","render","es","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.4b256dee.chunk.js","sourcesContent":["import React, { Component } from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport { addAction, delAction, FinishAction, updateAction } from \"../action\";\r\nimport \"./index.css\";\r\nexport class TodoItem extends Component {\r\n  render() {\r\n    return (\r\n      <li className=\"item\">\r\n        <input\r\n          type=\"checkbox\" checked={this.props.status==='finish'?true:false}\r\n          onChange={e => this.props.handleFinish(e, this.props.index)}\r\n        />\r\n        <p>{this.props.todo.value}</p>\r\n        <button onClick={() => this.props.handleDel(this.props.index)}>\r\n          删除\r\n        </button>\r\n      </li>\r\n    );\r\n  }\r\n}\r\n\r\nconst mapStateToProps = state => {\r\n  return {\r\n    todos: state.todos\r\n  };\r\n};\r\n\r\nconst mapDispatchToProps = dispatch => {\r\n  return {\r\n    // handleAdd:()=>{dispatch(addAction(val))},\r\n    handleDel: ind => {\r\n      dispatch(delAction(ind));\r\n    },\r\n    handleFinish: (e, ind) => {\r\n      e.target.checked\r\n        ? dispatch(FinishAction(ind))\r\n        : dispatch(updateAction(ind));\r\n    }\r\n  };\r\n};\r\n\r\nexport default connect(\r\n  mapStateToProps,\r\n  mapDispatchToProps\r\n)(TodoItem);\r\n","export const ADD_TODO = \"ADD_TODO\";\r\nexport const DEL_TODO = \"DEL_TODO\";\r\nexport const FINISH_TODO = \"FINISH_TODO\";\r\nexport const UPDATE_TODO = \"UPDATE_TODO\";\r\n\r\n\r\nexport const addAction = (payload) => ({\r\n    type: ADD_TODO,\r\n    payload\r\n})\r\n\r\nexport const delAction = (payload) => ({\r\n    type: DEL_TODO,\r\n    payload\r\n})\r\nexport const FinishAction = (payload) => ({\r\n    type: FINISH_TODO,\r\n    payload\r\n})\r\nexport const updateAction = (payload) => ({\r\n    type: UPDATE_TODO,\r\n    payload\r\n})\r\n\r\n","import React, { Component } from 'react'\r\n\r\nimport { connect } from 'react-redux'\r\nimport TodoItem from '../TodoItem';\r\nimport { addAction} from '../action';\r\nimport './index.css'\r\nexport class HomePage extends Component {\r\n    constructor(){\r\n        super();\r\n        this.state ={\r\n            value:\"\",\r\n        }\r\n    }\r\n    handleChange(e){\r\n        // console.log(this.state.value)\r\n        this.setState({value:e.target.value})\r\n    }\r\n    render() {\r\n        return (\r\n            <div className='todolist'>\r\n                <input type=\"text\" placeholder=\"添加TODO\" value={this.state.value} onChange={(e)=>{this.handleChange(e)}}/>\r\n                <button onClick={()=>{this.props.handleAdd(this.state.value)}}>添加</button>\r\n                <div>\r\n                    <h3>进行中<span>{this.props.waiting.length}</span></h3>\r\n                    {this.props.waiting.map((ele,ind)=>(<TodoItem key={ele.id} todo={ele} index={ele.id} status={ele.status}></TodoItem>))}\r\n                </div>\r\n                <div>\r\n                    <h3>已完成<span>{this.props.finish.length}</span></h3>\r\n                    {this.props.finish.map((ele,ind)=>(<TodoItem key={ele.id} todo={ele} index={ele.id} status={ele.status}></TodoItem>))}\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\nconst mapStateToProps = (state) => {\r\n    return {\r\n        waiting:state.todos.filter((ele)=>ele.status==='waiting'),\r\n        finish:state.todos.filter((ele)=>ele.status==='finish'),\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch,ownProps)=> {\r\n    return{\r\n        handleAdd:(val)=>{\r\n            const id = parseInt(Math.random()*1000000000)\r\n            console.log(id)\r\n            dispatch(addAction({id,val}))\r\n        },\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(HomePage)\r\n","import React from 'react';\r\nimport './App.css';\r\nimport Homepage from './components/Homepage'\r\n\r\nfunction App() {\r\n  return (\r\n    \r\n    <div className=\"App\">\r\n      <Homepage></Homepage>\r\n    </div>\r\n  );\r\n}\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import { ADD_TODO, DEL_TODO, FINISH_TODO, UPDATE_TODO } from \"./action\";\r\nconst initialState = {\r\n  todos: [\r\n    { value: \"1个待办事项\", status: \"finish\", id: 1 },\r\n    { value: \"2个待办事项\", status: \"waiting\", id: 2 },\r\n    { value: \"3个待办事项\", status: \"waiting\", id: 3 }\r\n  ]\r\n};\r\n\r\nexport default (state = initialState, { type, payload }) => {\r\n  switch (type) {\r\n\r\n    case ADD_TODO:\r\n      let todo = { value: payload.val, status: \"waiting\", id: payload.id };\r\n      return { todos: [...state.todos, todo] };\r\n\r\n    case DEL_TODO:\r\n      console.log(payload);\r\n      let newTodos = state.todos.filter(ele => ele.id !== payload);\r\n      console.log(newTodos);\r\n      return { todos: [...newTodos] };\r\n\r\n    case FINISH_TODO:\r\n      let arr = [];\r\n      state.todos.forEach(ele => {\r\n        if (ele.id === payload) {\r\n          ele.status = \"finish\";\r\n        }\r\n        arr.push(ele);\r\n      });\r\n      return { todos: [...arr] };\r\n\r\n    case UPDATE_TODO:\r\n      let arr2 = [];\r\n      state.todos.forEach(ele => {\r\n        if (ele.id === payload) {\r\n          ele.status = \"waiting\";\r\n        }\r\n        arr2.push(ele);\r\n      });\r\n      return { todos: [...arr2] };\r\n      \r\n    default:\r\n      return state;\r\n  }\r\n};\r\n","import { createStore } from 'redux';\r\nimport reducer from './reducer';\r\nconst store = createStore(reducer);\r\n\r\nexport default store;","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport { Provider } from 'react-redux';\r\nimport store from './components/store'\r\n\r\n\r\nReactDOM.render(<Provider store={store}><App/></Provider>, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}